@mixin generateTypeOfSimple($Args) {
  $data:              map-get($Args, input);
  $prevSel:           map-get($data, $__SELECTOR__);

  @each $elementName, $elementValue in $data {  
    @if type-of($elementValue) == "map" {
      $elementValue:  checkSelType($elementValue, $elementName);

      $sel:           map-get($elementValue, $__SEL__);
      $selType:       map-get($elementValue, $__SELTYPE__);
      
      $currentSel:    formatSelector($sel, $elementValue);
      $Selector:      "#{$prevSel}#{checkSpaces($elementValue)}#{$currentSel}";
      
      $elementValue:  map-merge($elementValue,($__SELECTOR__: $Selector));
      $elementValue:  map-merge($elementValue, ($__MQ__: map-get($Args, $__MQ__)));
      $Args:          map-merge($Args,(input: $elementValue));   

      
      @include globalChecks($elementValue);
      @include generateTypeOfSimple($Args);
    }
  }
}

@mixin formatGenTypeOfSimple($Args) {
  $Selector: map-get($Args, $__SELECTOR__);
  #{$Selector} {
    @each $propName, $propValue in $Args {
      @if (type-of($propValue) != "map") {
        @if (index($reservedNames, $propName) == null) {
          #{$propName}: #{$propValue};
        }     
      }
    }
  }
}
@import "functions";

%testing-settings {
  background-color: rgba(50, 50, 50, 0.15);
  border: 1px dashed rgba(50, 50, 50, 0.15);
  padding: 10px;
}

%global-grid-settings {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  overflow: hidden;
  @extend %testing-settings;
}

%global-col-settings {
  overflow: hidden;
  @extend %testing-settings;
}

main,
aside,
footer,
header,
section,
.section {
  display: block;
  margin: 0;
}

.container {
  flex-direction: row;
  width: 100%;
  @extend %global-grid-settings;
  gap: $gapInContainer;
}

.row {
  flex-direction: row;
  width: 100%;
  @extend %global-grid-settings;
  gap: $gapInRow;
}

@mixin columnProps($colGap, $collFlex, $isMQ: false) {
  @if ($colGap) {
    @for $i from 1 through $col-count {
      .col-#{$i} {
        width: gridWidth($col-count, $i, $gapInRow);
        @extend %global-col-settings;
      }
    }
  }

  @if ($collFlex) {
    @for $i from 0 through $col-count {
      .cf-#{$i} {
        flex: $i;
        @extend %global-col-settings;
      }
    }
  }
}

@mixin offsetProps($offsetL, $offsetR, $isMQ: false) {
  .offset-l0 {
    margin-left: 0px;
  }
  .offset-r0 {
    margin-right: 0px;
  }
  @for $i from 1 through ($col-count - 1) {
    @if ($offsetL) {
      .offset-l#{$i} {
        margin-left: gridOffset($col-count, $i, $gapInRow);
      }
    }
    @if ($offsetR) {
      .offset-r#{$i} {
        margin-right: gridOffset($col-count, $i, $gapInRow);
      }
    }
  }
}

// additional styles
.strict {
  max-width: $container-width;
}

.m-auto,
.to-center,
.to-mid {
  margin: 0 auto;
}

//tasks
// flex-basis:  gen
// flex-grow:   gen
// flex-shrink: gen
// gap:         gen

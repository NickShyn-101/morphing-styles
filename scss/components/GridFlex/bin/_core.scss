$CSS_PROPERTIES_LIST: map-merge(
  $CSS_PROPERTIES_LIST,
  $custom-grid-flex-props-list
);


%global-grid-settings {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  flex-wrap: wrap;
  overflow: hidden;
  width: 100%;
}

main,
aside,
footer,
header,
section,
.section {
  display: block;
  margin: 0;
}

.container {
  @extend %global-grid-settings;
  gap: $gapInContainer;
}

.row {
  @extend %global-grid-settings;
  gap: $gapInRow;
}

// generate cols
@mixin columnProps($colGap, $collFlex, $isMQ: "") {
  $mqLabel: toString($isMQ);

  %global-col-settings#{$mqLabel} {
    overflow: hidden;
  }

  @if ($colGap) {
    @for $i from 1 through $col-count {
      .#{$mqLabel}col-#{$i} {
        width: gridWidth($col-count, $i, $gapInRow);
        @extend %global-col-settings#{$mqLabel};
      }
    }
  }

  @if ($collFlex) {
    @for $i from 0 through $col-count {
      .#{$mqLabel}cf-#{$i} {
        flex: $i;
        @extend %global-col-settings#{$mqLabel};
      }
    }
  }
}
// generate offset param
@mixin offsetProps($offsetL, $offsetR, $isMQ: "") {
  $mqLabel: toString($isMQ);

  @if ($offsetL) {
    .#{$mqLabel}offset-l0 {
      margin-left: 0px;
    }
    @for $i from 1 through ($col-count - 1) {
      .#{$mqLabel}offset-l#{$i} {
        margin-left: gridOffset($col-count, $i, $gapInRow);
      }
    }
  }
  @if ($offsetR) {
    .#{$mqLabel}offset-r0 {
      margin-right: 0px;
    }
    @for $i from 1 through ($col-count - 1) {
      .#{$mqLabel}offset-l#{$i} {
        margin-left: gridOffset($col-count, $i, $gapInRow);
      }
    }
  }
}

        
// @for $i from 1 through ($col-count - 1) {
//   .#{$mqLabel}offset-l#{$i} {
//     margin-left: gridOffset($col-count, $i, $gapInRow);
//   }
// }

//default value offset-r0 
// start 1 ($i)
// end $col-count - 1
// sel - selector offset-l
// prop - property margin-left
// callback функция gridOffset($col-count, $i, $gapInRow);
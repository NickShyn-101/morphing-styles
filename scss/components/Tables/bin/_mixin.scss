@mixin createHighlight($props, $Args) {
  $area: nth($props, 1);
  $ColOrRow: nth($props, 2);
  $name: nth($props, 3);
  $colorBG: "";

  $default-colorBG: $colorBG;
  @if $default-colorBG == "" {
    $default-colorBG: var(--mg-table-striped-bg);
  }
  @if ($ColOrRow == "col") {
    table.striped-col-#{$area}-#{$name} {
      t#{$area} {
        td:nth-child(#{$name}),
        th:nth-child(#{$name}) {
          background: $default-colorBG;
        }
      }
    }
  }
  @if ($ColOrRow == "row") {
    table.striped-row-#{$name} {
      t#{$area} {
        tr:nth-child(#{$name}) {
          background: $default-colorBG;
        }
      }
    }
  }
}

@mixin createTableBorder($props, $Args) {

  $area: nth($props, 1);
  $type: nth($props, 2);
  $borderWidth: "";
  $borderColor: "";

  $border-default: $borderWidth;
  $border-color-default: $borderColor;
  @if $borderWidth == "" {
    @if $type == "wrapper" {
      $border-default: var(--mg-table-#{$area}-border);
    } @else if $type == "inner" {
      $border-default: var(--mg-table-#{$area}-row-border);
    } @else {
      $border-default: var(--mg-table-#{$area}-#{$type}-border);
    }
  }
  @if $border-color-default == "" {
    @if $type == "wrapper" {
      $border-color-default: var(--mg-table-#{$area}-border-color);
    } @else if $type == "inner" {
      $border-color-default: var(--mg-table-#{$area}-row-border-color);
    } @else {
      $border-color-default: var(--mg-table-#{$area}-#{$type}-border-color);
    }
  }
  @if ($type == "wrapper") {
    table.#{$area}-border {
      t#{$area} {
        border: #{$border-default};
        border-color: #{$border-color-default};
      }
    }
  }
  @if ($type == "row") {
    table.#{$area}-#{$type}-border {
      t#{$area} {
        tr {
          &:not(:last-child) {
            border-bottom: #{$border-default};
            border-bottom-color: #{$border-color-default};
          }
        }
      }
    }
  }
  @if ($type == "col") {
    table.#{$area}-#{$type}-border {
      t#{$area} {
        td,
        th {
          &:not(:last-child) {
            border-right: #{$border-default};
            border-right-color: #{$border-color-default};
          }
        }
      }
    }
  }
  @if ($type == "inner") {
    table.#{$area}-#{$type}-border {
      t#{$area} {
        tr {
          &:not(:last-child) {
            border-bottom: #{$border-default};
            border-bottom-color: #{$border-color-default};
          }
          td,
          th {
            &:not(:last-child) {
              border-right: #{$border-default};
              border-right-color: #{$border-color-default};
            }
          }
        }
      }
    }
  }
}

@mixin highlightTableAreas($area, $bgColor: "", $textColor: "") {
  $bgColor-default: $bgColor;
  $textColor-default: $textColor;
  @if $bgColor-default == "" {
    $bgColor-default: var(--mg-table-#{$area}-bg);
  }
  @if $textColor-default == "" {
    $textColor-default: var(--mg-table-#{$area}-color);
  }

  @if ($area == "head") or ($area == "foot") {
    table.hl-#{$area} t#{$area} tr {
      color: $textColor-default;
      background: $bgColor-default;
    }
  }
}

@mixin createTablePaddings($props, $Args) {
  $name:      nth($props, 1);
  $headerP:   nth($props, 2);
  $footerP:   nth($props, 3);
  $bodyP:     nth($props, 4);

  table.#{$name} {
    th,
    td {
      padding: #{$bodyP};
    }
    thead th,
    td {
      padding: #{$headerP};
    }
    tfoot th,
    td {
      padding: #{$footerP};
    }
  }
}
